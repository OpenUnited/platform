name: Deploy to Production and Demo

concurrency: deploy_to_production

on:
  - workflow_dispatch

env:
  STAGING_ID: cc67ac7f-d41b-4a9c-a2ce-37f322690cb8
  PRODUCTION_ID: c3364f4f-1d34-4b31-ac49-da9782159a7e
  DEMO_ID: c87ff841-b900-4cc7-b3ea-19d29948be6e

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - run: pip install yq
    - name: Fetch spec files
      run: |
        doctl apps spec get $STAGING_ID > staging.yaml
        doctl apps spec get $PRODUCTION_ID > production.yaml
        doctl apps spec get $DEMO_ID > demo.yaml
    - name: Verify image exists
      run: |
        export TAG="$(python -m yq -r '.services[] | select(.name == "platform") | .image.tag' staging.yaml)"
        echo "Checking for image tag: $TAG"
        if ! doctl registry repository list-tags core --format Tag | grep -q "^$TAG$"; then
          echo "Image tag $TAG not found in registry. Available tags:"
          doctl registry repository list-tags core --format Tag
          exit 1
        fi
    - name: Update image tag and env vars
      run: |
        export TAG="$(python -m yq -r '.services[] | select(.name == "platform") | .image.tag' staging.yaml)"
        if [ -z "$TAG" ]; then
          echo "Failed to get tag from staging environment"
          exit 1
        fi
        echo "Updating production and demo image tags to $TAG"
        
        # Update production tags
        python -m yq -Y --indentless --arg TAG "$TAG" '.services[].image.tag = $TAG' production.yaml > tmp.yaml && mv tmp.yaml production.yaml
        python -m yq -Y --indentless --arg TAG "$TAG" '.workers[].image.tag = $TAG' production.yaml > tmp.yaml && mv tmp.yaml production.yaml
        
        # Update demo tags
        python -m yq -Y --indentless --arg TAG "$TAG" '.services[].image.tag = $TAG' demo.yaml > tmp.yaml && mv tmp.yaml demo.yaml
        python -m yq -Y --indentless --arg TAG "$TAG" '.workers[].image.tag = $TAG' demo.yaml > tmp.yaml && mv tmp.yaml demo.yaml
        
        # Verify the updates
        PROD_TAG=$(python -m yq -r '.services[] | select(.name == "platform") | .image.tag' production.yaml)
        PROD_WORKER_TAG=$(python -m yq -r '.workers[] | select(.name == "django-q-worker") | .image.tag' production.yaml)
        DEMO_TAG=$(python -m yq -r '.services[] | select(.name == "platform") | .image.tag' demo.yaml)
        DEMO_WORKER_TAG=$(python -m yq -r '.workers[] | select(.name == "django-q-worker") | .image.tag' demo.yaml)
        
        if [ "$TAG" != "$PROD_TAG" ] || [ "$TAG" != "$PROD_WORKER_TAG" ] || [ "$TAG" != "$DEMO_TAG" ] || [ "$TAG" != "$DEMO_WORKER_TAG" ]; then
          echo "Tag update verification failed"
          exit 1
        fi
    - name: Update the environments
      run: |
        echo "Updating production environment..."
        doctl apps update $PRODUCTION_ID --spec production.yaml
        echo "Updating demo environment..."
        doctl apps update $DEMO_ID --spec demo.yaml
        echo "Deployment updates initiated - please check DigitalOcean console for status"