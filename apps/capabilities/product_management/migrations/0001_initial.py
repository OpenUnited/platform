# Generated by Django 4.2.2 on 2023-09-26 11:29

from django.db import migrations, models
import django.db.models.deletion
import django_lifecycle.mixins
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Attachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=512)),
                ("path", models.URLField()),
                (
                    "file_type",
                    models.CharField(blank=True, max_length=5, null=True),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Bounty",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, null=True),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("points", models.IntegerField()),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (0, "Draft"),
                            (1, "Blocked"),
                            (2, "Available"),
                            (3, "Claimed"),
                            (4, "Done"),
                            (5, "In review"),
                        ],
                        default=2,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Capability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("path", models.CharField(max_length=255, unique=True)),
                ("depth", models.PositiveIntegerField()),
                ("numchild", models.PositiveIntegerField(default=0)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(default="", max_length=1000)),
                (
                    "video_link",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "verbose_name_plural": "capabilities",
                "db_table": "capability",
            },
        ),
        migrations.CreateModel(
            name="CapabilityAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "db_table": "capability_attachment",
            },
        ),
        migrations.CreateModel(
            name="Challenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, null=True),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("title", models.TextField()),
                ("description", models.TextField()),
                ("short_description", models.TextField(max_length=256)),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (0, "Draft"),
                            (1, "Blocked"),
                            (2, "Available"),
                            (3, "Claimed"),
                            (4, "Done"),
                            (5, "In review"),
                        ],
                        default=0,
                    ),
                ),
                ("blocked", models.BooleanField(default=False)),
                ("featured", models.BooleanField(default=False)),
                (
                    "priority",
                    models.IntegerField(
                        choices=[(0, "High"), (1, "Medium"), (2, "Low")],
                        default=1,
                    ),
                ),
                (
                    "published_id",
                    models.IntegerField(blank=True, default=0, editable=False),
                ),
                (
                    "auto_approve_task_claims",
                    models.BooleanField(default=True),
                ),
                ("video_url", models.URLField(blank=True, null=True)),
                (
                    "reward_type",
                    models.IntegerField(
                        choices=[
                            (0, "Liquid Points"),
                            (1, "Non-liquid Points"),
                        ],
                        default=1,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Challenges",
            },
        ),
        migrations.CreateModel(
            name="ChallengeDependency",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "db_table": "product_management_challenge_dependencies",
            },
        ),
        migrations.CreateModel(
            name="ContributorAgreement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("agreement_content", models.TextField()),
            ],
            options={
                "db_table": "contribution_management_contributor_agreement",
            },
        ),
        migrations.CreateModel(
            name="ContributorAgreementAcceptance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "accepted_at",
                    models.DateTimeField(auto_now_add=True, null=True),
                ),
            ],
            options={
                "db_table": "contribution_management_contributor_agreement_acceptance",
            },
        ),
        migrations.CreateModel(
            name="ContributorGuide",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=60, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Idea",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, null=True),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(max_length=256)),
                ("description", models.TextField()),
                ("vote_count", models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, null=True),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "photo",
                    models.ImageField(blank=True, null=True, upload_to="avatars/"),
                ),
                ("name", models.TextField()),
                ("short_description", models.TextField()),
                ("full_description", models.TextField(blank=True, null=True)),
                (
                    "website",
                    models.CharField(blank=True, max_length=512, null=True),
                ),
                ("detail_url", models.URLField(blank=True, null=True)),
                ("video_url", models.URLField(blank=True, null=True)),
                ("slug", models.SlugField(unique=True)),
                ("is_private", models.BooleanField(default=False)),
                ("object_id", models.PositiveIntegerField()),
                (
                    "attachment",
                    models.ManyToManyField(
                        blank=True,
                        related_name="product_attachments",
                        to="product_management.attachment",
                    ),
                ),
                (
                    "capability_start",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product_management.capability",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, null=True),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=128)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProductChallenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, null=True),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product_management.challenge",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product_management.product",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Initiative",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, null=True),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("name", models.TextField()),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Active"),
                            (2, "Completed"),
                            (3, "Draft"),
                            (4, "Cancelled"),
                        ],
                        default=1,
                    ),
                ),
                ("video_url", models.URLField(blank=True, null=True)),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product_management.product",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
